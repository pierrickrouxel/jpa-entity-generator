# ---------------------------------------------------------
# *** JDBC configuration to fetch metadata ***

jdbcSettings:
  url: "jdbc:h2:mem:test;DB_CLOSE_DELAY=-1"
  schemaPattern: PUBLIC
  driverClassName: "org.h2.Driver"

# ---------------------------------------------------------
# *** Basic/global configuration ***

# If you need to specify non-standard source directory, set the following setting as needed
#   - string value: the relative path from the project root directory.
outputDirectory: "build/test-results/entities"

# The package name used when generating entity classes
#   - string value: full package name
packageName: "com.example"

# ---------------------------------------------------------
# Define the following rules if you'd like to scan only specific tables when generating entity classes
#   - array of TableScanRule objects
#     - tableName (string) / tableNames (array): string value that partially matches table names (case sensitive)
#tableScanRules:
#  - tableName: "foo_.*"

# ---------------------------------------------------------
# *** Rules for exclusion ***

# Define the following rules if you'd like to exclude specific tables when generating entity classes
#   - array of TableExclusionRule objects
#     - tableName (string) / tableNames (array): string value that partially matches table names (case sensitive)
tableExclusionRules:
  - tableName: ".*_tmp"
  - tableNames:
    - ".*_tmp2"

# ---------------------------------------------------------
# *** Rules for table/class name conversion ***

# If you need some rules that convert table names to entity class names, list the mapping rules as below.
#   - array of ClassNameRule objects
#     - tableName: table name (full name, case sensitive)
#     - className: Java class name to be used (you cannot include package name in front of the class name)
classNameRules:
  - tableName: "article"
    className: "BlogArticle"
  - tableName: "article_tag"
    className: "BlogArticleTag"

# ---------------------------------------------------------
# *** Java interfaces to let generated classes implement ***
#   - array of InterfaceRule objects
#     - (optional) className (string) / classNames (array): target Java class names (case sensitive)
#     - interfaces: array of Interface objects
#       - name: FQDN of the interface
#       - (optional) genericsClassNames: array of string values if the interface has generics
interfaceRules:
  # If you just specify the interfaces, all the generated classes'll implement the interfaces.
  - interfaces:
      - name: "java.io.Serializable"

  - classNames:
      - "Article"
    interfaces:
      - name: "com.example.util.ExpirationPredicate"

# ---------------------------------------------------------
# *** Rules on how to attach class annotations ***
#   - array of ClassAnnotationRule objects
#     - (optional) className (string) / classNames (array): target Java class names (case sensitive)
#     - annotations: array of Annotation objects
#       - className: the annotation class name
#       - (optional) attributes (array of AnnotationAttribute objects): attributes if exist
#         - name (string): the name of the attribute
#         - (optional) value (string): the value of the attribute
#         or
#         - code (string): writing code in a string value instead of specifying name + value
#       or
#       - code (string): write the whole code in a string value instead of specifying className + attributes
classAnnotationRules:
  # If you just specify the annotations, all the generated classes'll have them.
  - annotations:
      - className: "lombok.ToString"

  # You can specify the classes to have the class annotations.
  - classNames:
      - "Article"
    annotations:
      - className: "Deprecated"
  - className: "Blog"
    annotations:
      - className: "lombok.Builder"
        attributes:
          - name: "toBuilder"
            value: "true"

# ---------------------------------------------------------
# *** Rules on how to append class comments ***
#   - array of ClassAdditionalCommentRule objects
#     - (optional) className (string) / classNames (array): target Java class names (case sensitive)
#     - comment (string): comment value to be appended to the class definition
classAdditionalCommentRules:
  # If you just specify the classNames, all the generated classes'll have them.
  - comment: "Note: auto-generated by jpa-entity-generator"

  - classNames:
      - "Article"
    comment: "TODO: This Article is no longer used"

# ---------------------------------------------------------
# *** Rules to convert types of the fields in generated classes ***
#   - array of FieldTypeRule objects
#     - (optional) className (string) / classNames (array): target Java class names (case sensitive)
#     - fieldName (string) / fieldNames (array): the field name to convert its type
#     - typeName (string): the type name to be converted
fieldTypeRules:
  - classNames: ["Article"]
    fieldName: "name"
    typeName: "String"

  # If you don't specify classNames in a rule, all the generated classes will be affected.
  - fieldName: "active"
    typeName: "boolean"

# ---------------------------------------------------------
# *** Rules on how to attach field annotations ***
#   - array of FieldAnnotationRule objects
#     - (optional) className (string) / classNames (array): target Java class names (case sensitive)
#     - fieldName (string) / fieldNames (array): the field name to attach annotations
#     - annotations: array of Annotation objects
#       - className: the annotation class name
#       - (optional) attributes (array of AnnotationAttribute objects): attributes if exist
#         - name (string): the name of the attribute
#         - (optional) value (string): the value of the attribute
fieldAnnotationRules:
  - className: "BlogArticle"
    fieldNames:
      - "tags"
    annotations:
      - className: "Deprecated"

  - classNames:
      - "Article"
    fieldNames:
      - "name"
    annotations:
      - className: "com.example.annotation.Experimental"
        attributes:
          - name: "comment"
            value: '"The expected data format is JSON"'

# ---------------------------------------------------------
# *** Rules on how to append field comments ***
#   - array of FieldAdditionalCommentRule objects
#     - (optional) className (string) / classNames (array): target Java class names (case sensitive)
#     - fieldName (string) / fieldNames (array): the field name to attach annotations
#     - comment (string): comment value to be appended to the field definition
fieldAdditionalCommentRules:
  - className: "BlogArticleTag"
    fieldNames: ["articleId", "tagId"]
    comment: "The field is non-null value"

# ---------------------------------------------------------
# *** Rules on how to set default values to the fields ***
#   - array of FieldDefaultValueRule objects
#     - (optional) className (string) / classNames (array): target Java class names (case sensitive)
#     - fieldName (string) / fieldNames (array): the field name to attach annotations
#     - defaultValue (string): the default value part in source code (specify '"something"' if you have a string value)
fieldDefaultValueRules:
  # If you don't specify classNames in a rule, all the generated classes will be affected.
  - classNames: ["Tag"]
    fieldNames: ["average"]
    defaultValue: "0"
